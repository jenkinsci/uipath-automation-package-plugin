trigger:
  batch: true
  branches:
    include:
    - master
    - develop    
    - release/*

pr:
  branches:
    include:
    - master
    - develop    
    - release/*

resources:
  repositories:
    - repository: common
      type: github
      name: UiPath/AzurePipelinesTemplates
      ref: master
      endpoint: "GitHub connection"

variables:
  JENKINS_HOME: 'C:\Windows\System32\config\systemprofile\.jenkins'
  MavenPOMFile: '$(Build.SourcesDirectory)\pom.xml'
  AlphaBetaPluginVersionCounter: $[ format('{0}', counter('uipjenkinstaskversion', 1)) ]
  TestProjectPath: '$(Build.SourcesDirectory)\Qa\UiPath.JenkinsAutomationPackage.Tests\project.json'
  TestConfigurationData: "{\"Publishers\":[{\"Type\":\"JUnit\",\"Arguments\":\"outputFile=junitResults.xml;reportSkippedTestSuite=False\"}], \"VideoRecorderType\": \"ffmpeg\", \"VideoRecorderPath\": \"C:\\\\\\\\ffmpeg\\\\\\\\ffmpeg.exe\"}"

stages:
- stage: Build
  displayName: "Build CLI package"
  jobs:
  - job: BuildAndPublishArtifacts
    displayName: 'Build'
    timeoutInMinutes: 90
    workspace:
      clean: outputs
    variables:
      MavenPOMFile: '$(Build.SourcesDirectory)/pom.xml'
    pool:
      vmImage: windows-2022
      demands:
        - maven
    steps:
    - template: job.ci.build.yml

- ${{ if or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/masters/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/support/')) }}:
  - stage: BuildSecurityScan
    displayName: Build and Security Scan
    dependsOn: []
    jobs:
    - template: stage.security.yml

- stage: Deploy
  displayName: "Deploy on Jenkins server"
  dependsOn: Build
  jobs:
  - deployment: DeployJenkinsPlugin
    displayName: 'Deploy the new jenkins plugin'
    environment: JenkinsCITest
    timeoutInMinutes: 90
    workspace:
      clean: outputs
    variables:
      MavenPOMFile: '$(Build.SourcesDirectory)/pom.xml'
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none

          - download: current
            displayName: 'Download Packages'
            artifact: Packages

          - powershell: |
              az storage blob upload -f $(Agent.BuildDirectory)/Packages/uipath-automation-package.hpi -c $(ContainerName) -n $(Build.BuildNumber)/uipath-automation-package.hpi --account-name $(AzureAccountName) --auth-mode key --account-key $(StorageAccountKey) --overwrite
            displayName: "Upload plugin package to blob storage"

          - bash: |
              set -e
              wget $(JenkinsUrl)/jnlpJars/jenkins-cli.jar
              java -jar jenkins-cli.jar -s $(JenkinsUrl) -auth $(JenkinsUsername):$(JenkinsAuthToken) install-plugin https://$(AzureAccountName).blob.core.windows.net/$(ContainerName)/$(Build.BuildNumber)/uipath-automation-package.hpi -restart
              end=$((SECONDS+300)); while [[ "$(curl -k -s -o /dev/null -w ''%{http_code}'' $(JenkinsUrl)/login)" != "200" ]]; do if [[ $SECONDS -gt $end ]]; then echo "Operation timed out of checking p
              lugin installation status"; break; fi; echo "waiting for plugin to install" && sleep 5; done
            displayName: "Install package on Jenkins server"

- template: stage.test.yml

