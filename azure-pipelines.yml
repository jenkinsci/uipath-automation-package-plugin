trigger:
  batch: true
  branches:
    include:
    - master
    - develop    
    - release/*

pr:
  branches:
    include:
    - master
    - develop    
    - release/*

resources:
  repositories:
    - repository: common
      type: github
      name: UiPath/AzurePipelinesTemplates
      ref: master
      endpoint: "GitHub connection"

parameters:
- name: runLongRunningTests
  displayName: Run all tests
  type: boolean
  default: false

variables:
  JENKINS_HOME: 'C:\Windows\System32\config\systemprofile\.jenkins'
  MavenPOMFile: '$(Build.SourcesDirectory)\pom.xml'
  AlphaBetaPluginVersionCounter: $[ format('{0}', counter('uipjenkinstaskversion', 1)) ]
  TestProjectPath: '$(Build.SourcesDirectory)\Qa\UiPath.JenkinsAutomationPackage.Tests\project.json'
  TestConfigurationData: "{\"Publishers\":[{\"Type\":\"JUnit\",\"Arguments\":\"outputFile=junitResults.xml;reportSkippedTestSuite=False\"}], \"VideoRecorderType\": \"ffmpeg\", \"VideoRecorderPath\": \"C:\\\\\\\\ffmpeg\\\\\\\\ffmpeg.exe\"}"

stages:
- stage: Build
  displayName: "Build CLI package"
  jobs:
  - job: BuildAndPublishArtifacts
    displayName: 'Build and run unit tests'
    timeoutInMinutes: 90
    workspace:
      clean: outputs
    variables:
      MavenPOMFile: '$(Build.SourcesDirectory)/pom.xml'
    pool:
      vmImage: windows-latest
      demands:
        - maven
    steps:
    - template: job.ci.build.yml

- ${{ if or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/masters/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/support/')) }}:
  - stage: BuildSecurityScan
    displayName: Build and Security Scan
    dependsOn: []
    jobs:
    - template: stage.security.yml

- stage: Deploy
  displayName: "Deploy on Jenkins server"
  
  dependsOn: Build
  jobs:
  - deployment: DeployJenkinsPlugin
    displayName: 'Deploy the new jenkins plugin'
    environment: JenkinsCITest
    timeoutInMinutes: 90
    workspace:
      clean: outputs
    variables:
      MavenPOMFile: '$(Build.SourcesDirectory)/pom.xml'
    pool:
      name: JenkinsTest
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none

          - download: current
            displayName: 'Download Packages'
            artifact: Packages
        
          - powershell: |
              az storage blob upload -f $(Agent.BuildDirectory)/Packages/uipath-automation-package.hpi -c plugins -n $(Build.BuildNumber)/uipath-automation-package.hpi --account-name $(AzureAccountName) --auth-mode key --account-key $(StorageAccountKey)
            displayName: "Upload plugin package to blob storage"

          - bash: |
              rm jenkins-cli.jar*
              wget $(JenkinsUrl)/jnlpJars/jenkins-cli.jar
              java -jar jenkins-cli.jar -s $(JenkinsUrlHttp) -auth $(JenkinsUsername):$(JenkinsAuthToken) install-plugin https://$(AzureAccountName).blob.core.windows.net/plugins/$(Build.BuildNumber)/uipath-automation-package.hpi -restart
              timeout 300 bash -c 'while [[ "$(curl -k -s -o /dev/null -w ''%{http_code}'' $(JenkinsUrl)/login)" != "200" ]]; do echo "waiting for plugin to install" && sleep 5; done'
            displayName: "Install package on Jenkins server"

- template: stage.test.template.yml
  parameters:
    configurations:
    - stageName: 'Orchestrator_18_4'
      stageDisplayName: 'Orchestrator 18.4 (Classic Folder and User/Password Auth)'

    - stageName: 'Orchestrator_19_10'
      stageDisplayName: 'Orchestrator 19.10 (Classic Folder and User/Password Auth)'

## TODO add 20.4 tests
    # - stageName: 'Orchestrator_20_4'
    #   stageDisplayName: 'Orchestrator 20.4'

    - stageName: 'OrchTestingSol'
      stageDisplayName: 'Orchestrator TestingSol (User/Password Auth)'

    - stageName: 'Alpha'
      stageDisplayName: 'Orchestrator Alpha (Token Auth & External App)'

    # - stageName: 'Cloud'
    #   stageDisplayName: 'Orchestrator Cloud (Token Auth)'

    - stageName: 'Staging'
      stageDisplayName: 'Orchestrator Staging (Token Auth & External App)'

    - ${{ if eq(parameters.runLongRunningTests, 'true') }}:
      - stageName: 'Long_Running'
        stageDisplayName: 'Long Running Tests'

## TODO add errors validation tests
    # - stageName: 'Errors_Validation'
    #   stageDisplayName: 'Errors Validation Tests'
